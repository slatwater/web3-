// ==UserScript==
// @name         Midle LiveArt 自动化脚本
// @namespace    http://tampermonkey.net/
// @version      1.3
// @description  在 Midle LiveArt 页面上自动点击按钮
// @author
// @match        https://app.midle.io/airdrops/liveart
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // 日志函数，统一格式
    function log(message) {
        console.log(`[自动化脚本] ${message}`);
    }

    // 随机延迟函数，模拟人类操作
    function randomDelay(min = 500, max = 1000) {
        const delay = Math.floor(Math.random() * (max - min + 1)) + min;
        return new Promise(resolve => setTimeout(resolve, delay));
    }

    // 等待指定的 XPath 元素出现在 DOM 中
    function waitForXPath(xpath, timeout = 20000) {
        return new Promise((resolve, reject) => {
            const interval = 500;
            let elapsed = 0;

            const timer = setInterval(() => {
                const result = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                if (result.singleNodeValue) {
                    clearInterval(timer);
                    resolve(result.singleNodeValue);
                } else {
                    elapsed += interval;
                    if (elapsed >= timeout) {
                        clearInterval(timer);
                        reject(new Error(`等待 XPath 元素超时：${xpath}`));
                    }
                }
            }, interval);
        });
    }

    // 等待区域1中的按钮加载完成
    function waitForButtonsInRegion(region1, timeout = 30000) {
        return new Promise((resolve, reject) => {
            const interval = 500;
            let elapsed = 0;

            const timer = setInterval(() => {
                let clickableElements = Array.from(region1.querySelectorAll('button, div')).filter(el => isClickable(el));

                if (clickableElements.length > 0) {
                    clearInterval(timer);
                    resolve(clickableElements);
                } else {
                    elapsed += interval;
                    if (elapsed >= timeout) {
                        clearInterval(timer);
                        reject(new Error('等待区域1中的按钮加载超时'));
                    }
                }
            }, interval);
        });
    }

    // 判断元素是否可点击
    function isClickable(element) {
        // 检查元素是否有 onclick 属性
        if (element.onclick) return true;

        // 检查元素是否有特定的类名，例如 'clickable' 或 'task-item'
        if (element.classList.contains('clickable') || element.classList.contains('task-item')) return true;

        // 检查元素是否有 'cursor: pointer' 样式
        const style = window.getComputedStyle(element);
        if (style.cursor === 'pointer') return true;

        // 检查元素是否有 'role=button' 属性
        if (element.getAttribute('role') === 'button') return true;

        // 检查元素是否具有 'aria-label' 属性，常用于可点击元素
        if (element.hasAttribute('aria-label')) return true;

        // 检查元素是否具有 'tabindex' 属性，且值不为 -1
        const tabindex = element.getAttribute('tabindex');
        if (tabindex !== null && tabindex !== '-1') return true;

        return false;
    }

    // 主函数，执行自动化步骤
    async function main() {
        try {
            log('脚本开始执行。');

            // 确保页面已完全加载
            await new Promise(resolve => {
                if (document.readyState === 'complete') {
                    resolve();
                } else {
                    window.addEventListener('load', resolve);
                }
            });

            // 等待区域1出现
            const region1XPath = '//*[@id="system_layout_main"]/div/main/div/div[2]/div[2]/div';
            const region1 = await waitForXPath(region1XPath, 30000);
            log('区域1已找到。');

            // 等待区域1中的按钮加载完成
            log('等待区域1中的按钮加载...');
            await waitForButtonsInRegion(region1, 60000); // 等待最长60秒
            log('区域1中的按钮已加载。');

            // 持续监测区域1中的按钮，直到没有有效按钮
            await processClickableElementsInRegion(region1);

            log('区域1中无有效按钮，脚本结束。');

        } catch (error) {
            console.error(`错误：${error.message}`);
        }
    }

    // 处理区域1中的可点击元素
    async function processClickableElementsInRegion(region1) {
        const invalidElements = new Set();

        while (true) {
            // 获取最新的可点击元素列表，过滤已标记为无效的元素
            let clickableElements = Array.from(region1.querySelectorAll('button, div')).filter(el => !invalidElements.has(el) && isClickable(el));

            // 如果没有可点击元素了，结束循环
            if (clickableElements.length === 0) {
                log('没有更多的可点击元素可供处理。');
                break;
            }

            log(`开始处理 ${clickableElements.length} 个可点击元素。`);

            for (let i = 0; i < clickableElements.length; i++) {
                const element = clickableElements[i];

                // 如果元素已被标记为无效，跳过
                if (invalidElements.has(element)) {
                    continue;
                }

                // 检查元素是否在文档中（可能已被删除）
                if (!document.body.contains(element)) {
                    log(`元素 ${i + 1} 已不存在，跳过。`);
                    continue;
                }

                // 第一次点击
                log(`点击元素 ${i + 1} 的第一次。`);
                element.click();
                await randomDelay();

                // 等待元素可再次点击
                log(`等待元素 ${i + 1} 可再次点击。`);
                try {
                    await waitForElementEnabled(element, 10000);
                } catch (e) {
                    log(`元素 ${i + 1} 未能再次点击，跳过此元素。`);
                    invalidElements.add(element);
                    continue;
                }

                // 第二次点击
                log(`点击元素 ${i + 1} 的第二次。`);
                element.click();
                await randomDelay();

                // 检查元素是否消失
                if (!document.body.contains(element)) {
                    log(`元素 ${i + 1} 已消失，继续下一个元素。`);
                    continue;
                } else {
                    // 持续点击3次
                    let extraClicks = 0;
                    while (extraClicks < 3) {
                        log(`元素 ${i + 1} 未消失，进行额外点击 ${extraClicks + 1}。`);
                        element.click();
                        await randomDelay();

                        // 检查元素是否消失
                        if (!document.body.contains(element)) {
                            log(`元素 ${i + 1} 已消失，继续下一个元素。`);
                            break;
                        }

                        extraClicks++;
                    }

                    // 如果元素仍未消失，标记为无效
                    if (document.body.contains(element)) {
                        log(`元素 ${i + 1} 仍未消失，标记为无效。`);
                        invalidElements.add(element);
                    }
                }

                // 等待一段时间，监测是否有新元素加载
                await randomDelay(1000, 2000);
            }

            // 等待一段时间，监测区域1是否有新元素出现
            log('等待新元素加载...');
            await randomDelay(2000, 3000);
        }
    }

    // 等待元素可点击（未禁用）
    function waitForElementEnabled(element, timeout = 10000) {
        return new Promise((resolve, reject) => {
            const interval = 500;
            let elapsed = 0;

            const timer = setInterval(() => {
                if (!element.disabled && !element.getAttribute('disabled')) {
                    clearInterval(timer);
                    resolve();
                } else {
                    elapsed += interval;
                    if (elapsed >= timeout) {
                        clearInterval(timer);
                        reject(new Error('等待元素可点击超时'));
                    }
                }
            }, interval);
        });
    }

    // 开始自动化
    main();
})();
