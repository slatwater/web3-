// ==UserScript==
// @name         XtremeVerse 自动化脚本
// @namespace    http://tampermonkey.net/
// @version      1.3
// @description  自动化执行XtremeVerse页面上的特定操作
// @author       您的名字
// @match        https://xnet.xtremeverse.xyz/earn?index=1
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // 版本号
    const VERSION = '1.3';

    // 随机延迟函数（毫秒）
    function randomDelay(min = 1000, max = 3000) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    // 日志输出
    function log(message) {
        console.log(`[版本 ${VERSION}] ${message}`);
    }

    // 通过XPath获取元素
    function getElementByXPath(xpath, context = document) {
        return document.evaluate(xpath, context, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
    }

    // 等待页面完全加载并设置随机延迟
    function waitForPageLoad() {
        return new Promise((resolve) => {
            if (document.readyState === 'complete') {
                resolve();
            } else {
                window.addEventListener('load', () => {
                    resolve();
                });
            }
        });
    }

    // 等待元素出现
    function waitForElement(selector, timeout = 10000) {
        return new Promise((resolve, reject) => {
            const element = document.querySelector(selector);
            if (element) {
                return resolve(element);
            }

            const observer = new MutationObserver(() => {
                const el = document.querySelector(selector);
                if (el) {
                    observer.disconnect();
                    resolve(el);
                }
            });

            observer.observe(document.body, { childList: true, subtree: true });

            setTimeout(() => {
                observer.disconnect();
                reject(`等待元素 ${selector} 超时`);
            }, timeout);
        });
    }

    // 主执行函数
    async function main() {
        try {
            log('开始执行脚本，等待页面完全加载...');
            await waitForPageLoad();
            await new Promise(resolve => setTimeout(resolve, randomDelay()));
            log('页面已完全加载，开始执行操作。');

            // 步骤1：点击元素1
            log('步骤1：查找并点击元素1...');
            const element1XPath = '//*[@id="bodyNode"]/div[4]/div[1]/div/div[1]/div[2]/div[2]';
            const element1 = getElementByXPath(element1XPath);
            if (element1) {
                element1.click();
                log('步骤1完成。');
            } else {
                throw `无法找到元素1，XPath: ${element1XPath}`;
            }
            await new Promise(resolve => setTimeout(resolve, randomDelay()));

            // 步骤2：遍历点击区域1中文本为"Verify"的按钮
            log('步骤2：遍历点击区域1中所有"Verify"按钮...');
            const region1Selector = '#bodyNode > div.Box-sc-1rsndmr-0.styles__WrapT-sc-1gtzf12-4.lkoHY.fUbung > div.Box-sc-1rsndmr-0.styles__ZoomContentWrap-sc-1gtzf12-6.lkoHY.foLijU > div > div.airdrop__AirDropContentContainer-sc-4wk6us-0.jFBdMN > div > div > div:nth-child(2) > div:nth-child(2)';
            
            while (true) {
                const region1 = document.querySelector(region1Selector);
                if (!region1) {
                    throw `无法找到区域1，Selector: ${region1Selector}`;
                }

                const verifyButtons = Array.from(region1.querySelectorAll('button')).filter(btn => btn.innerText.trim() === 'Verify');
                
                if (verifyButtons.length === 0) {
                    log('区域1中已无"Verify"按钮。');
                    break;
                }

                for (let btn of verifyButtons) {
                    btn.click();
                    log('点击了一个"Verify"按钮。');
                    await new Promise(resolve => setTimeout(resolve, randomDelay()));
                }
            }

            // 步骤3：点击元素2
            log('步骤3：查找并点击元素2...');
            const element2XPath = '//*[@id="bodyNode"]/div[4]/div[1]/div/div[2]/div/div/div[2]/div[2]/div[2]/div/div/div/div[3]/div';
            const element2 = getElementByXPath(element2XPath);
            if (element2) {
                element2.click();
                log('步骤3完成。');
            } else {
                throw `无法找到元素2，XPath: ${element2XPath}`;
            }
            await new Promise(resolve => setTimeout(resolve, randomDelay()));

            // 步骤4：等待对话框出现
            log('步骤4：等待对话框出现...');
            const dialogSelector = 'div[id^="dialog-"]:not([aria-hidden="true"])'; // 选择当前可见的dialog
            const dialog = await waitForElement(dialogSelector, 10000);
            log('对话框已出现。');

            // 添加额外的延迟，确保元素3已加载
            const extraDelay = randomDelay(1000, 2000); // 1到2秒的额外延迟
            log(`等待额外的 ${extraDelay} 毫秒，以确保元素3已加载。`);
            await new Promise(resolve => setTimeout(resolve, extraDelay));

            // 定位元素3的更新后的XPath
            const element3XPath = '//*[@id="dialog-:r0:"]/div/div/div/div/div/div[3]/div[1]/div/button/span';
            log('步骤4：查找并点击元素3...');

            while (true) {
                // 确保对话框仍然存在
                const currentDialog = document.querySelector(dialogSelector);
                if (!currentDialog) {
                    log('对话框已关闭，脚本执行完毕。');
                    break;
                }

                // 查找元素3的<span>元素
                const element3Span = getElementByXPath(element3XPath);
                if (element3Span) {
                    // 找到<span>的父<button>元素
                    const button = element3Span.closest('button');
                    if (button) {
                        button.click();
                        log('点击了元素3。');
                        await new Promise(resolve => setTimeout(resolve, randomDelay()));
                    } else {
                        log('未找到元素3的可点击父元素（button）。');
                        break;
                    }
                } else {
                    log('元素3已不存在。');
                    break;
                }
            }

            log('脚本执行完毕。');

        } catch (error) {
            log(`错误：${error}`);
        }
    }

    // 执行主函数
    main();

})();
