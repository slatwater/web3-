// ==UserScript==
// @name         Auto Click on Arcana P12 Tasks with Random Delay and Random Element Selection
// @namespace    http://tampermonkey.net/
// @version      2.4
// @description  自动点击Arcana P12页面任务的脚本，添加随机延迟，并在点击任务后刷新页面进行验证
// @match        *://arcana.p12.games/*
// @grant        GM_setValue
// @grant        GM_getValue
// @run-at       document-idle
// ==/UserScript==

(function() {
    'use strict';

    // 随机延迟函数
    function randomDelay(min, max) {
        return new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * (max - min + 1)) + min));
    }

    // 等待元素出现的函数（带重试机制）
    function waitForElement(selector, timeout = 20000, retryInterval = 1000) {
        return new Promise((resolve, reject) => {
            const startTime = Date.now();
            (function check() {
                let element;
                if (selector.startsWith('/')) {
                    element = document.evaluate(selector, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
                } else {
                    element = document.querySelector(selector);
                }
                if (element) {
                    resolve(element);
                } else if (Date.now() - startTime > timeout) {
                    reject(new Error(`Timeout: Element ${selector} not found`));
                } else {
                    setTimeout(check, retryInterval);  // 延迟后再次检查
                }
            })();
        });
    }

    // 设置执行标志，避免重复执行前几步
    const taskCompleted = GM_getValue('taskCompleted', false);

    // 执行 Arcana P12 页面上的任务
    if (window.location.hostname === 'arcana.p12.games') {
        console.log('Detected Arcana P12 page.');

        async function executeArcanaTasks() {
            try {
                // 如果任务已经完成，则直接从第五步开始
                if (!taskCompleted) {
                    // 第一步：点击第一个区域
                    const firstArea = await waitForElement('#__next > div > div.relative.h-full.__className_e04c4e.__variable_e04c4e > main > div > div.grid.w-full.grid-cols-3.gap-4.overflow-auto.px-15.pb-6.pt-4.\\32 xl\\:container.xl\\:px-4 > div.col-span-2.flex.w-full.gap-5 > div.guide-step-01.backdrop-box.flex.w-\\[480px\\].cursor-pointer.flex-col.overflow-hidden.rounded-lg.pb-4.transition-all.lg\\:flex-grow');
                    await randomDelay(1000, 3000);  // 添加随机延迟
                    firstArea.click();
                    console.log('Clicked first area.');

                    await randomDelay(2000, 4000);

                    // 第二步：随机选择并点击以下元素之一
                    const xpaths = [
                        '//*[@id=":r11:"]/div/div/div[2]/div[2]/div[3]/div[1]/div/div[2]',
                        '//*[@id=":r11:"]/div/div/div[2]/div[2]/div[3]/div[2]/div/div[2]',
                        '//*[@id=":r11:"]/div/div/div[2]/div[2]/div[3]/div[3]/div/div[2]',
                        '//*[@id=":r11:"]/div/div/div[2]/div[2]/div[3]/div[4]/div/div[2]',
                        '//*[@id=":r11:"]/div/div/div[2]/div[2]/div[3]/div[7]/div/div[2]'
                    ];

                    const randomXPath = xpaths[Math.floor(Math.random() * xpaths.length)];
                    const randomElement = await waitForElement(randomXPath);
                    await randomDelay(1000, 3000);  // 添加随机延迟
                    randomElement.click();
                    console.log(`Clicked random element with XPath: ${randomXPath}`);

                    await randomDelay(2000, 4000);

                    // 第三步：点击小窗口中的 "Max" 按钮
                    const maxButton = [...document.querySelectorAll('p.cursor-pointer')].find(el => el.textContent === 'Max');
                    if (maxButton) {
                        await randomDelay(1000, 3000);  // 添加随机延迟
                        maxButton.click();
                        console.log('Clicked Max button.');
                    } else {
                        throw new Error('Max button not found');
                    }

                    await randomDelay(2000, 4000);

                    // 第四步：点击下一个元素
                    const fourthElement = await waitForElement('//*[@id=":r1j:"]/div/div[2]/div[4]/button');
                    await randomDelay(1000, 3000);  // 添加随机延迟
                    fourthElement.click();
                    console.log('Clicked fourth element.');

                    await randomDelay(2000, 4000);

                    // 标记任务已完成前四步
                    GM_setValue('taskCompleted', true);

                    // 第五步：刷新网页
                    console.log('Refreshing the page...');
                    window.location.reload();
                } else {
                    // 第六步：点击任务元素
                    console.log('Page reloaded, continuing the task.');
                    await randomDelay(3000, 5000); // 等待网页加载完成后延迟

                    const taskElement = await waitForElement('//*[@id="task"]');
                    await randomDelay(1000, 3000);  // 添加随机延迟
                    taskElement.click();
                    console.log('Clicked task element.');

                    await randomDelay(2000, 4000);

                    // 第七步：点击 "Verify" 按钮
                    const verifyButton = await waitForElement('//*[@id="panel:r3:1"]/div/div/div[2]/div/div[2]');
                    await randomDelay(1000, 3000);  // 添加随机延迟
                    verifyButton.click();
                    console.log('Clicked Verify button.');

                    // 清除任务标志，防止下次循环时跳过前几步
                    GM_setValue('taskCompleted', false);
                }
            } catch (error) {
                console.error('自动化过程出错：', error);
            }
        }

        executeArcanaTasks();
    }
})();
