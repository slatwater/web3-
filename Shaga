// ==UserScript==
// @name         Glob Shaga Quests 自动化脚本
// @namespace    http://tampermonkey.net/
// @version      1.1
// @description  自动化操作 https://glob.shaga.xyz/quests 页面上的任务
// @author       您的名字
// @match        https://glob.shaga.xyz/quests*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // 版本信息
    const SCRIPT_VERSION = "1.1";

    // 日志函数
    function log(message) {
        console.log(`[Glob Shaga Quests 自动化脚本 v${SCRIPT_VERSION}] ${message}`);
    }

    // 随机延迟函数，返回Promise
    function randomDelay(min = 1000, max = 3000) {
        const delay = Math.floor(Math.random() * (max - min + 1)) + min;
        return new Promise(resolve => setTimeout(resolve, delay));
    }

    // 等待CSS选择器出现
    function waitForSelector(selector, timeout = 30000) {
        return new Promise((resolve, reject) => {
            const interval = 500;
            let elapsed = 0;
            const timer = setInterval(() => {
                const element = document.querySelector(selector);
                if (element) {
                    clearInterval(timer);
                    resolve(element);
                } else {
                    elapsed += interval;
                    if (elapsed >= timeout) {
                        clearInterval(timer);
                        reject(new Error(`等待元素 ${selector} 超时`));
                    }
                }
            }, interval);
        });
    }

    // 等待XPath选择器出现
    function waitForXPath(xpath, timeout = 30000) {
        return new Promise((resolve, reject) => {
            const interval = 500;
            let elapsed = 0;
            const timer = setInterval(() => {
                const result = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                if (result.singleNodeValue) {
                    clearInterval(timer);
                    resolve(result.singleNodeValue);
                } else {
                    elapsed += interval;
                    if (elapsed >= timeout) {
                        clearInterval(timer);
                        reject(new Error(`等待XPath ${xpath} 超时`));
                    }
                }
            }, interval);
        });
    }

    // 主函数
    async function main() {
        try {
            log("脚本开始执行，等待页面完全加载...");

            // 元素1：<img src="other/Group 1000004021.png">
            const imgSelector = 'img[src="other/Group 1000004021.png"]';

            // 元素2的XPath
            const element2XPath = '//*[@id="root"]/div/div[1]/main/div[3]/div[2]/div[3]/div[6]/span[2]/span/span';

            // 等待元素1出现
            const imgElement = await waitForSelector(imgSelector, 20000);
            log(`找到元素1，src="${imgElement.getAttribute('src')}"，准备点击。`);

            // 获取元素1的父级元素（假设是可点击的）
            // 如果元素1本身不可点击，可以找到其最近的可点击父级
            let clickableElement = imgElement.closest('button, a, div[onclick], span[onclick]');
            if (!clickableElement) {
                // 如果找不到可点击的父级，可以尝试点击img本身
                clickableElement = imgElement;
                log("未找到可点击的父级元素，将直接点击<img>元素。");
            } else {
                log(`找到可点击的父级元素：${clickableElement.tagName}`);
            }

            // 滚动到元素并点击
            clickableElement.scrollIntoView({ behavior: 'smooth', block: 'center' }); // 确保元素在视野内
            await randomDelay(500, 1500); // 在点击前稍作延迟
            clickableElement.click();
            log("已点击元素1，开始监测元素2的出现。");

            // 等待元素2出现
            log(`等待元素2出现，XPath: ${element2XPath}`);
            await waitForXPath(element2XPath, 30000);
            log("元素2已出现，脚本结束。");

        } catch (error) {
            log(`发生错误: ${error.message}`);
        }
    }

    // 等待页面完全加载后执行主函数
    window.addEventListener('load', async () => {
        // 随机延迟后开始执行
        const initialDelay = Math.floor(Math.random() * 2000) + 1000; // 1-3秒
        log(`页面加载完成，等待 ${initialDelay} 毫秒后开始执行脚本。`);
        await new Promise(resolve => setTimeout(resolve, initialDelay));
        main();
    });

})();
// ==UserScript==
// @name         Auto Click on Shaga Quests SPIN Button in Background
// @namespace    http://tampermonkey.net/
// @version      1.6
// @description  自动点击Shaga Quests页面上的SPIN按钮，并在百度主页上打开Shaga Quests页面，支持后台运行
// @match        *://www.baidu.com/*
// @match        *://glob.shaga.xyz/*quests*
// @grant        GM_openInTab
// @grant        window.focus
// @run-at       document-idle
// ==/UserScript==

(function() {
    'use strict';

    // 在百度主页上执行，打开Shaga Quests页面
    if (window.location.hostname === 'www.baidu.com') {
        console.log('Detected Baidu, opening Shaga Quests page in a new tab.');
        GM_openInTab('https://glob.shaga.xyz/quests', { active: false, insert: true });
    }

    // 在 Shaga Quests 页面上执行
    if (window.location.hostname === 'glob.shaga.xyz' && window.location.pathname.includes('quests')) {
        console.log('Detected Shaga Quests page.');

        // 定义点击 SPIN 按钮的函数
        function clickSpinButton() {
            const spinButton = document.evaluate('//*[@id="root"]/div/div[1]/main/div[3]/div[2]/div[2]/div[7]', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
            if (spinButton) {
                console.log('SPIN button found, simulating click...');
                spinButton.click();
                console.log('SPIN button clicked.');
            } else {
                console.log('SPIN button not found, will retry when DOM changes.');
            }
        }

        // 使用 MutationObserver 监听 DOM 变化
        function observeDOMChanges() {
            const targetNode = document.body;
            const config = { childList: true, subtree: true };

            const callback = function(mutationsList, observer) {
                for (let mutation of mutationsList) {
                    if (mutation.type === 'childList') {
                        clickSpinButton();
                    }
                }
            };

            const observer = new MutationObserver(callback);
            observer.observe(targetNode, config);
            console.log('Observing DOM changes for SPIN button...');
        }

        // 页面加载完成后的操作
        window.addEventListener('load', () => {
            console.log('Page loaded, starting SPIN button check...');
            setTimeout(() => {
                clickSpinButton();     // 立即尝试点击
                observeDOMChanges();   // 开始监听 DOM 变化
            }, 2000); // 页面加载完成后延迟2秒后开始
        });
    }
})();
