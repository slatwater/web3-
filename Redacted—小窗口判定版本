// ==UserScript==
// @name         Auto Click on Redacted Airways Quest Buttons with Retry on Continue Button
// @namespace    http://tampermonkey.net/
// @version      1.11
// @description  自动点击Redacted Airways页面上的FOLLOW, LIKE, RETWEET按钮，跳过无效按钮，并处理小窗口上的相同按钮和CONTINUE按钮
// @match        https://quest.redactedairways.com/home
// @grant        none
// @run-at       document-idle
// ==/UserScript==

(function() {
    'use strict';

    // 随机延迟函数，避免被检测为机器人
    function randomDelay(min, max) {
        return new Promise(resolve => setTimeout(resolve, Math.floor(Math.random() * (max - min + 1)) + min));
    }

    // 检查按钮是否可点击
    function isButtonClickable(button) {
        const style = window.getComputedStyle(button);
        return !button.disabled && style.visibility !== 'hidden' && style.opacity !== '0' && button.offsetParent !== null;
    }

    // 等待元素出现的函数（带 XPath 支持）
    function waitForElement(selector, timeout = 10000) {
        return new Promise((resolve, reject) => {
            const startTime = Date.now();
            (function check() {
                let element;
                if (selector.startsWith('/')) {
                    element = document.evaluate(selector, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
                } else {
                    element = document.querySelector(selector);
                }
                if (element) {
                    resolve(element);
                } else if (Date.now() - startTime > timeout) {
                    resolve(null);  // 解析为null, 避免抛出错误，继续流程
                } else {
                    requestAnimationFrame(check);
                }
            })();
        });
    }

    // 点击主区域中的按钮，并处理无效点击的情况
    async function findAndClickActionButton() {
        const targetArea = document.querySelector('#social-quests > section.relative.mb-6.z-20');
        if (!targetArea) {
            console.log('目标区域未找到');
            return;
        }

        // 查找所有可点击的按钮
        const buttons = Array.from(targetArea.querySelectorAll('button')).filter(button =>
            ['FOLLOW', 'LIKE', 'RETWEET'].some(text => button.innerText.toUpperCase().includes(text)) && isButtonClickable(button) && !button.hasAttribute('data-clicked')
        );

        if (buttons.length === 0) {
            console.log('没有可点击的目标按钮');
            await clickBackupAndMoveToSecondArea();
            return;
        }

        for (let button of buttons) {
            // 标记已经点击过的按钮，防止重复点击
            button.setAttribute('data-clicked', 'true');
            console.log(`点击了按钮: ${button.innerText}`);
            button.click();

            // 等待小窗口弹出，未找到小窗口则继续下一个按钮
            const popup = await waitForElement('//*[@id="social-quests"]/div[1]/div[2]/div', 5000);
            if (popup) {
                console.log('小窗口出现，处理弹窗内的按钮');
                await handlePopup();
                break;  // 找到有效按钮后退出循环
            } else {
                console.log(`点击 ${button.innerText} 后没有出现小窗口，继续尝试下一个按钮`);
                continue;  // 尝试下一个按钮
            }
        }

        // 如果所有按钮都尝试后还没有弹出小窗口，跳到备用元素
        if (!document.querySelector('div.fixed.flex.justify-center.items-center.z-40')) {
            await clickBackupAndMoveToSecondArea();
        }
    }

    // 处理弹出的窗口
    async function handlePopup() {
        const popupSelector = '//*[@id="social-quests"]/div[1]/div[2]/div';
        const popup = await waitForElement(popupSelector, 5000);

        if (popup) {
            console.log('小窗口已出现，处理其中的按钮...');

            // 在小窗口内继续寻找"FOLLOW", "LIKE", "RETWEET"的按钮，并确保按钮可点击
            let popupButtons = Array.from(popup.querySelectorAll('button')).filter(button =>
                ['FOLLOW', 'LIKE', 'RETWEET'].some(text => button.innerText.toUpperCase().includes(text)) && isButtonClickable(button)
            );

            for (let button of popupButtons) {
                console.log(`点击弹窗内的按钮: ${button.innerText}`);
                button.click();
                await randomDelay(1000, 3000);  // 每次点击后增加延迟
            }

            // 尝试等待并点击 "CONTINUE" 按钮
            await waitForContinueButton();
        } else {
            console.log('小窗口未出现');
        }
    }

    // 等待 "CONTINUE" 按钮，重试机制
    async function waitForContinueButton() {
        let continueButton;
        let attempts = 0;
        const maxAttempts = 5; // 设置最大尝试次数

        while (attempts < maxAttempts) {
            attempts++;
            console.log(`等待CONTINUE按钮，尝试次数: ${attempts}`);

            // 延迟10到15秒，等待按钮加载
            await randomDelay(10000, 15000);

            // 查找所有按钮并通过innerText过滤出 "CONTINUE" 按钮
            continueButton = Array.from(document.querySelectorAll('button')).find(button => button.innerText.toUpperCase() === 'CONTINUE' && isButtonClickable(button));
            if (continueButton) {
                console.log('点击CONTINUE按钮');
                continueButton.click();
                break; // 成功点击后退出循环
            } else {
                console.log(`CONTINUE按钮未找到，重试第 ${attempts} 次...`);
            }
        }

        if (!continueButton) {
            console.log('未能找到 CONTINUE 按钮，脚本结束。');
        }
    }

    // 点击备用元素并转到第二个区域
    async function clickBackupAndMoveToSecondArea() {
        console.log('点击备用元素并转到第二个区域...');
        const backupElement = await waitForElement('//*[@id="social-quests"]/section[1]/div[1]/div[2]');
        if (backupElement) {
            console.log('Clicking backup element...');
            backupElement.click();
            await randomDelay(1000, 3000);
            await findAndClickSecondaryAction(); // 转到第二个区域操作
        } else {
            console.log('Backup element not found.');
        }
    }

    // 点击第二个区域中的按钮
    async function findAndClickSecondaryAction() {
        const secondArea = await waitForElement('//*[@id="social-quests"]/div[1]/div/div[1]/div[4]/div[2]');
        if (!secondArea) {
            console.log('第二目标区域未找到');
            return;
        }

        const buttons = Array.from(secondArea.querySelectorAll('button')).filter(button =>
            ['FOLLOW', 'LIKE', 'RETWEET'].some(text => button.innerText.toUpperCase().includes(text)) && isButtonClickable(button) && !button.hasAttribute('data-clicked')
        );

        if (buttons.length === 0) {
            console.log('第二目标区域内无目标按钮，点击备用元素...');
            await clickFinalBackup();
            return;
        }

        for (let button of buttons) {
            button.setAttribute('data-clicked', 'true');
            console.log(`点击了第二目标区域的按钮: ${button.innerText}`);
            button.click();

            await randomDelay(1000, 3000);  // 增加延迟

            // 处理弹出的窗口
            await handlePopup();
        }
    }

    // 点击最后一个备用元素
    async function clickFinalBackup() {
        const finalBackupElement = await waitForElement('//*[@id="social-quests"]/div[1]/div/div[2]/div[2]');
        if (finalBackupElement) {
            console.log('点击最后一个备用元素');
            finalBackupElement.click();
            await randomDelay(1000, 3000);
            await findAndClickSecondaryAction(); // 转到第二个区域操作
        } else {
            console.log('最后一个备用元素未找到');
        }
    }

    // 主循环
    async function mainLoop() {
        while (true) {
            await findAndClickActionButton();
            await randomDelay(3000, 5000);  // 添加延迟以避免操作过于频繁
            if (document.querySelectorAll('#social-quests > section.relative.mb-6.z-20 button').length === 0) {
                console.log('没有剩余的目标按钮，点击备用元素');
                await clickBackupAndMoveToSecondArea();
                break;
            }
        }
    }

    // 页面加载完成后启动主循环，增加初始延迟
    window.addEventListener('load', async () => {
        console.log('页面加载完成，启动自动点击脚本');
        await randomDelay(5000, 8000);  // 增加页面加载后的初始延迟
        mainLoop();
    });

})();
