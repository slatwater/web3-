你现在是一位专业且出色的前端自动化交互脚本专家，擅长并熟悉网页前端中的各种元素数据结构选择以及交互代码，同时特别擅长制作Tampermonkey脚本。

在制作脚本之前，有几点大前提需要注意，以后制作的所有关于网页自动化脚本都默认以下列几点作为前提基础制作脚本：
1.需要等待并且确保网页完全加载，并设置随机时间延迟后，再开始执行脚本
2.脚本每一步之间需设立适当的随即延迟时间
3.脚本的每一步执行需确保上一步操作已执行成功之后再进行
4.每个脚本需要添加中文的脚本输出日志
5.脚本在满足以上几点的前提下，保持尽可能的简洁
6.请标记所制作的每个脚本的版本，我提出的每一次脚本修改以及优化都是针对你制作的最新版本脚本，除非我有指明是哪个脚本，如果指明版本，则请在该版本的原始代码上进行修改。



现在制作一个Tampermonkey脚本，以下是脚本的功能需求以及相关数据：

数据部分：

目标网址：
https://hub.beamable.network/modules/*
元素1：//*[@id="sidebarScroll"]/div/div[1]/div[4]/div[2]/div[3]/div/a[1]/button
元素1-1：a.h-full.flex.flex-col.justify-between.p-4
元素1-2：#moduleGriddedContainer > div > div.flex.flex-col.gap-4 > div.lg\:h-full.flex.flex-col.xl\:flex-row.gap-2.sm\:gap-4.lg\:gap-8 > div.bg-content.flex.flex-col.py-4.px-6.gap-6.sm\:gap-8.h3.xl\:w-1\/2 > div.flex.flex-col.gap-6.sm\:gap-8.lg\:gap-6.false > button
元素1-3：#headlessui-dialog-panel-\:r7\: > div.w-full > button
元素1-4：#moduleGriddedContainer > div > div.xl\:col-span-2.flex.justify-between.items-center > a
元素1-5：#moduleGriddedContainer > div > div.flex.flex-col.gap-4 > div.lg\:h-full.flex.flex-col.xl\:flex-row.gap-2.sm\:gap-4.lg\:gap-8 > div.bg-content.flex.flex-col.py-4.px-6.gap-6.sm\:gap-8.h3.xl\:w-1\/2 > div.flex.flex-col.gap-6.sm\:gap-8.lg\:gap-6.false > div > div > div:nth-child(2) > a


元素2：//*[@id="sidebarScroll"]/div/div[1]/div[4]/div[2]/div[3]/div/a[2]/button
元素2-1：<div class="flex items-center whitespace-break-spaces transition-all duration-300 justify-center gap-2" style="font-family: Urbanist; font-size: 16px; font-weight: 400; letter-spacing: 0px; color: rgb(255, 255, 255);">Claim</div>



元素3：//*[@id="sidebarScroll"]/div/div[2]/div/a/button/div
元素3-1：<div class="flex items-center whitespace-break-spaces" style="font-family: &quot;DM Mono&quot;; font-size: 14px; font-weight: 400; letter-spacing: 0px; color: rgb(255, 255, 255);">RSVP Now</div>
元素3-2：#actionMenu > div > div.button.text-center.m-4 > button > div

功能部分：
第一步：
首先点击元素1，然后识别页面中存在多少个元素1-1，并遍历每个元素1-1的状态。并根据状态执行相应的操作：
1.如果存在"Claimed"的状态，则跳过该元素，并继续下个元素的状态检查
2.如果存在"Claimable"的状态，则进行点击该元素，然后等待元素1-2出现并进行点击，然后等待元素1-3出现并点击，然后点击元素4，然后继续下个元素的状态检查
3.如果不存在任何状态信息，则进行点击该元素，然后等待元素1-5出现并进行点击，然后点击元素4，然后继续下个元素的状态检查

所有的元素1-1状态遍历完毕后，进入第二步操作

第二步：
首先点击元素2，然后等待元素2-1出现并进行点击。执行完点击后进入第三步

第三步：
首先点击元素3，然后判断页面中存在多少个元素3-1，并点击元素3-1，然后点击元素3-2.直至页面中不在存在元素3-1。脚本结束




