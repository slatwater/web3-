// ==UserScript==
// @name         SideQuest 自动化脚本
// @namespace    http://tampermonkey.net/
// @version      1.0
// @description  自动化操作 https://sidequest.rcade.game/quests 页面上的任务
// @author       您的名字
// @match        https://sidequest.rcade.game/quests
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // 版本信息
    const SCRIPT_VERSION = "1.0";

    // 日志函数
    function log(message) {
        console.log(`[SideQuest 自动化脚本 v${SCRIPT_VERSION}] ${message}`);
    }

    // 随机延迟函数，返回Promise
    function randomDelay(min = 1000, max = 3000) {
        const delay = Math.floor(Math.random() * (max - min + 1)) + min;
        return new Promise(resolve => setTimeout(resolve, delay));
    }

    // 等待元素出现
    function waitForSelector(selector, timeout = 30000) {
        return new Promise((resolve, reject) => {
            const interval = 500;
            let elapsed = 0;
            const timer = setInterval(() => {
                const element = document.querySelector(selector);
                if (element) {
                    clearInterval(timer);
                    resolve(element);
                } else {
                    elapsed += interval;
                    if (elapsed >= timeout) {
                        clearInterval(timer);
                        reject(new Error(`等待元素 ${selector} 超时`));
                    }
                }
            }, interval);
        });
    }

    // 等待元素消失
    function waitForElementToDisappear(selector, timeout = 30000) {
        return new Promise((resolve, reject) => {
            const interval = 500;
            let elapsed = 0;
            const timer = setInterval(() => {
                const element = document.querySelector(selector);
                if (!element) {
                    clearInterval(timer);
                    resolve();
                } else {
                    elapsed += interval;
                    if (elapsed >= timeout) {
                        clearInterval(timer);
                        reject(new Error(`等待元素 ${selector} 消失超时`));
                    }
                }
            }, interval);
        });
    }

    // 主函数
    async function main() {
        try {
            log("脚本开始执行，等待页面完全加载...");
            await waitForSelector('#root > div > div > div.main > div.content.undefined > div > div.mission-list');
            await randomDelay(2000, 4000);
            log("页面加载完成，开始执行第一步操作。");

            // 步骤一：循环点击任务按钮
            const missionListSelector = '#root > div > div > div.main > div.content.undefined > div > div.mission-list';
            let missionList = document.querySelector(missionListSelector);
            while (true) {
                const buttons = missionList.querySelectorAll('button');
                if (buttons.length === 0) {
                    log("区域1中没有更多的button元素，进入第二步。");
                    break;
                }

                // 随机选择一个按钮
                const randomIndex = Math.floor(Math.random() * buttons.length);
                const selectedButton = buttons[randomIndex];
                log(`点击区域1中的第 ${randomIndex + 1} 个按钮。`);
                selectedButton.click();

                // 等待小窗口1出现
                const smallWindow1Selector = 'body > div:nth-child(8) > div > div > div > div';
                log("等待小窗口1出现...");
                await waitForSelector(smallWindow1Selector);
                log("小窗口1已出现。");
                await randomDelay(1000, 2000);

                // 在小窗口1中点击元素1的button子元素
                const element1Selector = 'body > div:nth-child(8) > div > div > div > div > div:nth-child(3) > div > div button';
                log("查找并点击小窗口1中的元素1的button子元素。");
                const element1Button = await waitForSelector(element1Selector, 10000);
                if (element1Button) {
                    element1Button.click();
                    log("已点击元素1的button子元素，等待其消失...");
                    // 等待元素1的button子元素消失，预计约25秒
                    await waitForElementToDisappear(element1Selector, 30000);
                    log("元素1的button子元素已消失。");
                } else {
                    log("未找到元素1的button子元素。");
                }

                // 点击小窗口1中的元素2
                const element2Selector = 'body > div:nth-child(8) > div > div > div > div > button > img';
                log("查找并点击小窗口1中的元素2。");
                const element2 = await waitForSelector(element2Selector, 10000);
                if (element2) {
                    element2.click();
                    log("已点击元素2。");
                } else {
                    log("未找到元素2。");
                }

                // 随机延迟后继续循环
                await randomDelay(2000, 4000);
            }

            // 步骤二：点击元素3并处理小窗口2
            const element3Selector = '#root > div > div > div.main > div.content.undefined > div > div.spin-container > div > button';
            log("开始执行第二步，点击元素3。");
            const element3 = await waitForSelector(element3Selector, 10000);
            if (element3) {
                element3.click();
                log("已点击元素3，等待小窗口2出现。");
            } else {
                log("未找到元素3，无法执行第二步。");
                return;
            }

            // 等待小窗口2出现
            const smallWindow2Selector = 'body > div.ReactModalPortal > div > div > div > div';
            await waitForSelector(smallWindow2Selector, 10000);
            log("小窗口2已出现。");
            await randomDelay(1000, 2000);

            // 点击小窗口2中的元素4
            const element4Selector = 'body > div.ReactModalPortal > div > div > div > div > button.spin-btn';
            log("查找并点击小窗口2中的元素4。");
            const element4 = await waitForSelector(element4Selector, 10000);
            if (element4) {
                element4.click();
                log("已点击元素4，等待其消失...");
                // 等待元素4消失
                await waitForElementToDisappear(element4Selector, 30000);
                log("元素4已消失。");
            } else {
                log("未找到元素4。");
            }

            // 点击小窗口2中的元素5
            const element5Selector = 'body > div.ReactModalPortal > div > div > div > div > button.close-btn > img';
            log("查找并点击小窗口2中的元素5。");
            const element5 = await waitForSelector(element5Selector, 10000);
            if (element5) {
                element5.click();
                log("已点击元素5。");
            } else {
                log("未找到元素5。");
            }

            log("脚本执行完毕。");

        } catch (error) {
            log(`发生错误: ${error.message}`);
        }
    }

    // 等待页面完全加载后执行主函数
    window.addEventListener('load', async () => {
        // 随机延迟后开始执行
        const initialDelay = Math.floor(Math.random() * 2000) + 1000; // 1-3秒
        log(`页面加载完成，等待 ${initialDelay} 毫秒后开始执行脚本。`);
        await new Promise(resolve => setTimeout(resolve, initialDelay));
        main();
    });

})();
