// ==UserScript==
// @name         CryptoPond Ideas 自动化脚本 (通用定位 New Topic 按钮)
// @namespace    http://tampermonkey.net/
// @version      1.7修订7
// @description  在cryptopond.xyz/ideas/create页面自动填写并提交表单，使用文本匹配方式定位"New Topic"按钮（元素5）。
// @match        https://cryptopond.xyz/ideas/create
// @grant        none
// @run-at       document-end
// ==/UserScript==

(function() {
    'use strict';

    console.log('[脚本日志] 脚本已加载，等待页面DOM完成...');

    const inputData1 = [
        "Autonomous Disaster Response System",
        "Intelligent Personal Nutritionist",
        "AI-Based Legal Compliance Checker",
        "Smart Urban Planning Assistant",
        "Real-Time Fraud Detection Engine",
        "AI-Driven Personalized News Aggregator",
        "Intelligent Manufacturing Quality Control",
        "Virtual Reality Content Generator",
        "AI-Powered Language Learning Companion",
        "Autonomous Agricultural Yield Predictor",
        "Smart Healthcare Resource Allocator",
        "AI-Enhanced Virtual Therapist",
        "AI-Powered Customer Support Bot",
        "Predictive Traffic Management System",
        "AI-Driven Financial Forecasting",
        "Intelligent Content Personalizer",
        "Smart Inventory Management System",
        "AI-Powered Marketing Automation",
        "AI-Based Job Matching Platform",
        "Autonomous Supply Chain Optimizer",
        "AI-Powered Health Monitoring System",
        "Autonomous Fleet Management System",
        "Intelligent Document Processing Tool",
        "AI-Enhanced Virtual Assistant",
        "Predictive Energy Consumption Model",
        "AI-Based Smart Home Manager",
        "AI-Driven Cybersecurity Threat Detection",
        "Intelligent Climate Change Modeling System",
        "Personalized Workout Planner",
        "AI-Powered Fraud Prevention System",
        "Real-Time Speech Recognition System",
        "AI-Powered Image Classification",
        "Smart Farm Management System",
        "AI-Based Customer Retention Platform",
        "Autonomous Logistics Coordination",
        "Real-Time Language Translation System",
        "AI-Powered Social Media Insights",
        "AI-Based Data Cleaning Tool",
        "Smart Manufacturing Efficiency Enhancer",
        "AI-Enhanced Financial Risk Analysis",
        "AI-Powered Resume Screening Tool",
        "Personalized News Recommender System",
        "AI-Driven Mental Health Support System",
        "Autonomous Drone Delivery System",
        "AI-Based Predictive Maintenance System",
        "AI-Powered Virtual Design Assistant",
        "Intelligent Education System",
        "AI-Driven Personalized Learning Pathways",
        "Autonomous Traffic Flow Optimizer",
        "AI-Based Voice Command Recognition System",
        "Smart Waste Management System"
    ];

    const inputData2 = [
        "An AI-driven platform designed to manage and coordinate disaster response efforts efficiently, utilizing real-time data from sensors and satellite imagery.",
        "A personalized AI nutritionist that creates tailored meal plans based on individual dietary needs, health goals, and lifestyle preferences.",
        "An AI tool that ensures organizational compliance with legal regulations by automating the review of contracts and policies.",
        "An AI-powered assistant that aids urban planners in designing efficient, sustainable cities by analyzing population growth, traffic patterns, and environmental impact.",
        "A robust AI system that identifies and prevents fraudulent activities across industries like finance, e-commerce, and insurance.",
        "An intelligent news platform that curates personalized news content based on individual interests and reading habits.",
        "An AI-based system that monitors and ensures manufacturing quality by detecting defects, predicting maintenance needs, and optimizing production parameters.",
        "An AI-powered tool that generates immersive virtual reality content based on user preferences and context.",
        "An interactive AI tutor that enhances language learning through personalized lessons, real-time feedback, and conversational practice.",
        "An AI system that predicts crop yields by analyzing environmental data, soil conditions, weather patterns, and farming practices."
    ];

    const inputData3 = [
        "Autonomous Disaster Response System, This AI-driven platform is designed to handle disaster management efficiently by autonomously analyzing real-time data from various sources such as satellite imagery, sensors, drones, and social media. It can predict natural disasters like earthquakes, floods, and wildfires, assess the damage, and optimize the allocation of resources during emergencies. The system can suggest the best routes for emergency responders, automatically adjust rescue operations, and coordinate communication among agencies. It also provides valuable insights by simulating disaster scenarios, enhancing preparedness strategies, and improving recovery times, making it crucial for disaster-prone areas worldwide.",
        "Intelligent Personal Nutritionist, This personalized AI nutritionist tailors meal plans to meet the health goals and dietary preferences of its users. By analyzing personal data such as age, weight, activity level, and medical history, it offers precise meal suggestions and tracks nutritional intake to promote overall wellness. It integrates with wearable devices and health apps to monitor exercise routines, sleep patterns, and stress levels, allowing it to adjust meal plans dynamically based on the user's changing needs. This system is particularly useful for individuals with specific health conditions such as diabetes, hypertension, or heart disease, providing real-time, actionable feedback and ongoing support for achieving nutritional goals.",
        "AI-Based Legal Compliance Checker, This AI tool automatically reviews contracts, policies, and organizational documents to ensure they comply with legal regulations and industry standards. It uses natural language processing to detect compliance gaps, flag high-risk areas, and suggest changes to mitigate legal exposure. The system tracks regulatory updates and automatically adjusts templates and policies to stay current with evolving laws. This helps businesses minimize legal risks, reduce the time spent on manual compliance checks, and ensure smooth audits.",
        "Smart Urban Planning Assistant, An AI-powered assistant that supports urban planners in designing efficient, sustainable cities. This model uses data from traffic patterns, population growth, environmental impact studies, and infrastructure usage to offer data-driven recommendations. It helps optimize land use, improve transportation networks, and reduce environmental footprints. The system simulates various development scenarios and provides insights into long-term effects, helping cities meet their sustainability goals while addressing housing, mobility, and public service needs.",
        "Real-Time Fraud Detection Engine, An AI model designed to continuously monitor transactions and detect fraudulent activities in real-time across sectors such as banking, e-commerce, and insurance. It analyzes large volumes of transaction data, comparing it to known fraud patterns and flagging any suspicious activity. The system uses machine learning to refine its detection methods and adapt to new fraud tactics. This tool is vital for minimizing financial losses, maintaining security, and ensuring the integrity of digital transactions.",
        "AI-Driven Personalized News Aggregator, An intelligent news platform that curates and delivers personalized news content by learning from a user’s preferences, reading history, and engagement behavior. It analyzes articles from a variety of sources, filtering out irrelevant information and presenting only the most relevant and timely news based on the user’s interests. The model employs natural language processing to summarize articles, track emerging trends, and ensure that the news delivered is engaging and aligned with the user's knowledge and preferences. The system also adapts as users’ interests evolve over time.",
        "Intelligent Manufacturing Quality Control, This AI system uses machine learning and computer vision to monitor production processes in real-time, detecting defects, and ensuring product quality. By analyzing data from cameras, sensors, and machines on the production line, it can identify inconsistencies or faults that might be missed by human inspectors. The system autonomously suggests adjustments to production processes to maintain high quality and reduce waste. With the ability to predict future defects and schedule maintenance proactively, it helps manufacturers optimize operations and ensure that the final products meet rigorous quality standards.",
        "Virtual Reality Content Generator, An AI-powered tool that automatically generates virtual reality (VR) content tailored to specific user needs, including interactive environments, training simulations, and gaming experiences. By analyzing user input and preferences, it customizes virtual scenarios, creating highly immersive, dynamic worlds. The system uses deep learning algorithms to improve content realism and interaction, adapting in real-time to the user’s actions and decisions. Whether for entertainment, education, or virtual meetings, this VR generator enhances the user experience with minimal manual effort from content creators.",
        "AI-Powered Language Learning Companion, An AI-driven tutor designed to assist language learners by providing personalized lessons, interactive practice sessions, and real-time feedback. The system adapts to the user’s proficiency level and learning speed, offering a customized curriculum based on speech recognition and natural language processing. It simulates real-life conversations, helping users practice their speaking, listening, and writing skills in an immersive, supportive environment. The system continuously learns from the user’s progress, adjusting difficulty levels and content to ensure steady advancement toward fluency.",
        "Autonomous Agricultural Yield Predictor, This AI system predicts crop yields by analyzing environmental data, including soil conditions, weather patterns, and historical crop performance. The system leverages machine learning models to forecast potential yields and optimize agricultural practices like planting schedules, irrigation, and fertilization. It helps farmers make data-driven decisions to maximize productivity while minimizing resource waste. By integrating IoT devices and drones for real-time monitoring, the system can adjust predictions and recommendations on the fly, improving overall crop health and yield efficiency.",
        "Smart Healthcare Resource Allocator, An AI-driven platform that optimizes the allocation of healthcare resources such as medical staff, equipment, and facilities based on real-time demand and availability. By analyzing patient data, hospital capacity, and treatment requirements, it ensures efficient distribution of resources to meet patient needs effectively. Utilizing machine learning and data analytics, this allocator enhances operational efficiency, reduces wait times, and improves patient care quality by ensuring that healthcare resources are utilized optimally and responsively. It also supports strategic planning and emergency preparedness in healthcare settings.",
        "AI-Enhanced Virtual Therapist, This AI system provides mental health support through conversational interactions, offering cognitive behavioral therapy (CBT) techniques, stress management strategies, and emotional support. Using natural language understanding, the system responds empathetically to users’ concerns and helps individuals cope with anxiety, depression, and other mental health challenges. It continuously adapts to the user’s emotional state, offering tailored advice and tools to improve mental well-being. This virtual therapist is accessible 24/7, making mental health resources more available and reducing the stigma associated with seeking help.",
        "AI-Powered Customer Support Bot, An intelligent chatbot that autonomously handles customer inquiries, resolves issues, and provides personalized assistance around the clock. Leveraging natural language processing and machine learning, it understands and responds to a wide range of customer queries with human-like accuracy. This model not only improves user satisfaction by delivering swift and accurate support but also reduces the workload on human support teams, allowing them to focus on more complex tasks.",
        "Predictive Traffic Management System, An AI-powered system that predicts traffic congestion, accidents, and optimal routes in real-time by analyzing data from cameras, sensors, GPS, and social media. It helps reduce traffic jams, improves vehicle flow, and optimizes traffic light patterns to improve commute times. The system also provides commuters with real-time traffic updates, alternative route suggestions, and forecasts based on historical traffic patterns, enhancing overall urban mobility and reducing environmental impact.",
        "AI-Driven Financial Forecasting, A sophisticated AI model that analyzes financial data, market trends, and economic indicators to predict future financial performance and market movements. By leveraging machine learning algorithms, it identifies patterns and generates accurate forecasts for investments, budgeting, and strategic planning. This tool aids financial analysts, investors, and businesses in making informed decisions, mitigating risks, and maximizing returns. It is particularly useful for stock market predictions, portfolio management, and economic trend analysis.",
        "Intelligent Content Personalizer, An AI model that delivers highly personalized content by analyzing user preferences, behavior, and contextual information. By understanding a user’s interests, viewing habits, and past interactions, it provides tailored recommendations for articles, videos, and other media. This system continuously learns from user feedback, adjusting content suggestions to improve engagement and satisfaction. It is ideal for media companies, e-commerce platforms, and social networks, driving higher user retention and content consumption.",
        "Smart Inventory Management System, This AI-powered inventory system autonomously tracks stock levels, predicts demand, and optimizes stock replenishment to prevent shortages and overstocking. By integrating with sales data, historical trends, and seasonal demand patterns, the system ensures inventory is managed efficiently across warehouses and retail outlets. It alerts managers to reorder items before they run out and offers insights to improve supply chain efficiency. This tool is especially valuable in e-commerce and retail environments, reducing waste and improving operational costs.",
        "AI-Powered Marketing Automation, An AI model that optimizes marketing campaigns by analyzing customer behavior, market trends, and campaign performance data. It uses machine learning to predict which customers are most likely to convert and delivers personalized advertisements and promotions. The system automatically adjusts campaign parameters based on real-time data, ensuring maximum reach and engagement. It also evaluates the effectiveness of campaigns, providing actionable insights that can help marketers fine-tune strategies to boost conversion rates.",
        "AI-Based Job Matching Platform, An AI platform designed to match job seekers with potential employers by analyzing resumes, job descriptions, and candidate profiles. Using natural language processing and machine learning, the system evaluates both hard and soft skills, cultural fit, and experience to recommend suitable matches. It streamlines the hiring process by automating candidate screening, suggesting qualified candidates, and even predicting long-term job satisfaction based on historical performance data. This model benefits both employers and job seekers, improving recruitment efficiency and job placement success.",
        "Autonomous Supply Chain Optimizer, This AI system autonomously optimizes the entire supply chain by analyzing data from suppliers, warehouses, logistics, and customer demand. It predicts supply chain disruptions, recommends preventive actions, and automates inventory management and order fulfillment. Using machine learning algorithms, the system continuously learns from past trends and current market conditions to make dynamic decisions on stock levels, delivery routes, and supplier performance. This model helps businesses improve delivery times, reduce costs, and enhance customer satisfaction."
    ];

    const inputData4 = [
        "Highly accurate at detecting patterns, but requires large amounts of data for effective training.",
        "Exceptional at understanding natural language, though it struggles with understanding context in ambiguous situations.",
        "Provides great real-time insights, but the performance may degrade when handling large-scale data.",
        "Extremely effective at automating repetitive tasks, yet may lack flexibility in handling complex scenarios.",
        "Impressive in image recognition, but sensitive to lighting and image quality variations.",
        "Excellent at predicting customer behavior, though it may sometimes generate overfitted models.",
        "Strong in recognizing speech, but occasional misinterpretations occur with accents or background noise.",
        "Highly efficient in processing large datasets, but it requires substantial computational resources.",
        "Great at personalizing content, though it may require regular updates to maintain accuracy.",
        "Remarkable in anomaly detection, but occasionally prone to false positives that need manual validation.",
        "Fantastic for real-time analytics, but scalability issues arise when handling millions of data points.",
        "Highly adaptable for dynamic environments, yet its learning process is slow and resource-intensive.",
        "Effective at sentiment analysis, though its understanding of sarcasm and irony is still developing.",
        "Impressive at predicting trends, but it struggles with rare or unseen events in the data.",
        "Great for automating workflows, though it may face challenges when dealing with multi-step processes.",
        "Exceptional at recommending products, but might make irrelevant suggestions for niche markets.",
        "Outstanding for medical diagnosis, but dependent on the quality and diversity of training data.",
        "Robust for fraud detection, but may require frequent tuning to stay ahead of new tactics.",
        "Highly effective at task automation, but the learning curve for initial setup can be steep.",
        "Excellent at optimizing logistics, yet its adaptability to unpredictable events is limited.",
        "Strong at predictive analytics, but still needs improvements in understanding user intent in certain contexts.",
        "Offers personalized recommendations, but may have trouble with diverse and changing user preferences.",
        "Great at performing data-driven decision-making, but struggles with subjective judgment calls.",
        "Efficient in real-time decision making, though its performance can deteriorate in highly variable environments.",
        "Impressive in classifying images, but struggles with low-resolution or highly distorted images.",
        "Reliable for managing supply chains, but can become inefficient when multiple supply chain variables change simultaneously.",
        "Highly effective in voice recognition, but requires a quiet environment to operate optimally.",
        "Fantastic at financial forecasting, though it needs a diverse dataset to improve accuracy.",
        "Highly efficient for language translation, but may not always capture cultural nuances.",
        "Great for predictive maintenance, but its accuracy can drop in highly dynamic environments."
    ];

    const inputData5 = inputData4; // 与inputData4相同的数据

    // 等待输入框3的函数：返回第一个ProseMirror编辑器
    async function waitForProseMirrorEditorForInput3(timeout = 30000) {
        const start = Date.now();
        return new Promise((resolve, reject) => {
            const timer = setInterval(() => {
                const editors = document.querySelectorAll('div.ProseMirror.bn-editor.bn-default-styles[contenteditable="true"]');
                if (editors.length > 0) {
                    clearInterval(timer);
                    const targetEditor = editors[0]; // 第一个为输入框3
                    resolve(targetEditor);
                } else if (Date.now() - start >= timeout) {
                    clearInterval(timer);
                    reject(new Error("等待输入框3的ProseMirror编辑器出现超时"));
                }
            }, 500);
        });
    }

    // 等待输入框5的函数：返回最后一个ProseMirror编辑器
    async function waitForProseMirrorEditorForInput5(timeout = 30000) {
        const start = Date.now();
        return new Promise((resolve, reject) => {
            const timer = setInterval(() => {
                const editors = document.querySelectorAll('div.ProseMirror.bn-editor.bn-default-styles[contenteditable="true"]');
                if (editors.length > 0) {
                    clearInterval(timer);
                    const targetEditor = editors[editors.length - 1]; // 最后一个为输入框5
                    resolve(targetEditor);
                } else if (Date.now() - start >= timeout) {
                    clearInterval(timer);
                    reject(new Error("等待输入框5的ProseMirror编辑器出现超时"));
                }
            }, 500);
        });
    }

    // 等待“New Topic”按钮的函数
    async function waitForNewTopicButton(timeout = 30000) {
        const start = Date.now();
        return new Promise((resolve, reject) => {
            const timer = setInterval(() => {
                const buttons = document.querySelectorAll('button.chakra-button');
                for (const btn of buttons) {
                    const textContent = (btn.textContent || '').trim().toLowerCase();
                    if (textContent.includes('new topic')) {
                        clearInterval(timer);
                        resolve(btn);
                        return;
                    }
                }
                if (Date.now() - start >= timeout) {
                    clearInterval(timer);
                    reject(new Error("等待包含 'New Topic' 文本的按钮超时"));
                }
            }, 500);
        });
    }

    window.addEventListener('load', function() {
        console.log('[脚本日志] 页面已加载完成，开始执行startScript...');
        startScript();
    });

    async function startScript() {
        console.log('[脚本日志] 开始执行步骤1...');

        const input1Selector = 'input[placeholder="Enter the title of your model idea"]';
        const input2Selector = 'textarea[placeholder="Enter a brief summary of your model idea"]';

        // Publish Topic按钮的CSS选择器保持不变
        const publishButtonSelector = 'button.chakra-button.css-144iil6';

        // 第一步输入框1和2
        const input1 = await waitForElement(input1Selector);
        setNativeInputValue(input1, getRandomItem(inputData1));
        console.log('[脚本日志] 已在输入框1中输入内容');
        await randomDelay(2000, 2000);

        const input2 = await waitForElement(input2Selector);
        setNativeInputValue(input2, getRandomItem(inputData2));
        console.log('[脚本日志] 已在输入框2中输入内容');
        await randomDelay(2000, 2000);

        // 等待输入框3出现并输入内容
        console.log('[脚本日志] 等待输入框3出现...');
        const input3 = await waitForProseMirrorEditorForInput3();
        await insertTextIntoProseMirror(input3, getRandomItem(inputData3));
        console.log('[脚本日志] 已在输入框3中输入内容');
        await randomDelay(2000, 2000);

        console.log('[脚本日志] 正在等待 "Save" 按钮出现...');
        const saveButtonSelector = 'button.chakra-button.css-hva83m';
        const saveButton = await waitForElement(saveButtonSelector);
        console.log('[脚本日志] "Save"按钮已出现，滚动到视图中...');
        saveButton.scrollIntoView({behavior: "smooth", block: "center"});
        await randomDelay(500, 1000);

        console.log('[脚本日志] 尝试点击 "Save"按钮...');
        saveButton.dispatchEvent(new MouseEvent('click', {bubbles:true, cancelable:true, view:window}));
        console.log('[脚本日志] 已尝试点击 "Save"按钮');
        await randomDelay(3000, 3000);

        console.log('[脚本日志] 开始执行步骤2...');

        const element2Text = "model factory";
        const element3Text = "ongoing";
        const element4Text = "discussion";

        await clickTextElement(element2Text);
        await randomDelay(2000, 3000);

        await clickTextElement(element3Text);
        await randomDelay(2000, 3000);

        await clickTextElement(element4Text);
        await randomDelay(2000, 3000);

        console.log('[脚本日志] 等待并点击"New Topic"按钮(元素5) ...');
        const newTopicButton = await waitForNewTopicButton();
        newTopicButton.scrollIntoView({behavior: "smooth", block: "center"});
        await randomDelay(500, 1000);
        newTopicButton.dispatchEvent(new MouseEvent('click', {bubbles:true, cancelable:true, view:window}));
        console.log('[脚本日志] 已点击"New Topic"按钮');
        await randomDelay(2000, 3000);

        const input4Selector = 'input[placeholder="Enter title"]';
        const input4 = await waitForElement(input4Selector);
        const input4Value = getRandomItem(inputData4);
        setNativeInputValue(input4, input4Value);
        console.log('[脚本日志] 已在输入框4中输入内容:', input4Value);
        await randomDelay(2000, 2000);

        console.log('[脚本日志] 等待输入框5出现...');
        const input5 = await waitForProseMirrorEditorForInput5();
        console.log('[脚本日志] 输入框5已出现，开始输入与输入框4相同的内容...');
        await insertTextIntoProseMirror(input5, input4Value);
        console.log('[脚本日志] 已在输入框5中输入与输入框4相同的内容');
        await randomDelay(2000, 2000);

        // 点击“Publish Topic”按钮
        console.log('[脚本日志] 正在等待 "Publish Topic" 按钮出现...');
        const publishButton = await waitForElement(publishButtonSelector);
        publishButton.scrollIntoView({behavior:"smooth", block:"center"});
        await randomDelay(500,1000);
        publishButton.dispatchEvent(new MouseEvent('click', {bubbles:true, cancelable:true, view:window}));
        console.log('[脚本日志] 已点击"Publish Topic"按钮，脚本结束。');
    }

    function getRandomItem(arr) {
        return arr[Math.floor(Math.random() * arr.length)];
    }

    function randomDelay(min, max) {
        const delay = Math.floor(Math.random() * (max - min + 1)) + min;
        return new Promise(resolve => setTimeout(resolve, delay));
    }

    function waitForElement(selector, timeout = 30000) {
        const start = Date.now();
        return new Promise((resolve, reject) => {
            const timer = setInterval(() => {
                const el = document.querySelector(selector);
                if (el) {
                    clearInterval(timer);
                    resolve(el);
                } else if (Date.now() - start >= timeout) {
                    clearInterval(timer);
                    reject(new Error(`等待元素 ${selector} 超时`));
                }
            }, 500);
        });
    }

    async function clickTextElement(text) {
        const el = await waitForTextElement(text);
        el.scrollIntoView({behavior: "smooth", block: "center"});
        await randomDelay(500, 1000);
        el.dispatchEvent(new MouseEvent('click', {bubbles:true, cancelable:true, view:window}));
        console.log(`[脚本日志] 已点击文本为 "${text}" 的元素`);
    }

    function waitForTextElement(text, timeout = 30000) {
        const lowerText = text.toLowerCase();
        return new Promise((resolve, reject) => {
            const start = Date.now();
            const timer = setInterval(() => {
                const allElems = document.querySelectorAll('button, div, span, a, p, h1, h2, h3, h4, h5, h6, li');
                for (const el of allElems) {
                    const elText = (el.textContent || '').trim().toLowerCase();
                    if (elText === lowerText) {
                        clearInterval(timer);
                        resolve(el);
                        return;
                    }
                }
                if (Date.now() - start >= timeout) {
                    clearInterval(timer);
                    reject(new Error(`等待文本为 "${text}" 的元素超时`));
                }
            }, 500);
        });
    }

    function setNativeInputValue(element, value) {
        const prototype = Object.getPrototypeOf(element);
        const descriptor = Object.getOwnPropertyDescriptor(prototype, 'value');
        if (descriptor && descriptor.set) {
            descriptor.set.call(element, value);
        } else {
            element.value = value;
        }
        element.dispatchEvent(new Event('input', {bubbles:true}));
        element.dispatchEvent(new Event('change', {bubbles:true}));
    }

    async function insertTextIntoProseMirror(element, text) {
        element.focus();
        let p = element.querySelector('p');
        if (!p) {
            p = document.createElement('p');
            element.innerHTML = '';
            element.appendChild(p);
        } else {
            p.innerHTML = '';
        }

        const range = document.createRange();
        range.selectNodeContents(p);
        range.collapse(true);
        const sel = window.getSelection();
        sel.removeAllRanges();
        sel.addRange(range);

        for (const char of text) {
            document.execCommand('insertText', false, char);
            const inputEvt = new Event('input', {bubbles:true});
            element.dispatchEvent(inputEvt);
            await randomDelay(20, 40);
        }
    }

})();
