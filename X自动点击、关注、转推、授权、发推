// ==UserScript==
// @name         Combined X.com Intent & Twitter OAuth2 自动化脚本
// @namespace    http://tampermonkey.net/
// @version      1.0.2
// @description  在所有子域名的 X.com Intent 授权页面、Twitter OAuth2 授权页面和 X.com Compose Post 页面加载完成后，随机延迟后自动点击指定按钮并关闭页面。
// @author      
// @match        https://*.x.com/intent/*
// @match        https://*.twitter.com/i/oauth2/authorize*
// @match        https://x.com/compose/post*
// @grant        none
// @run-at       document-idle
// ==/UserScript==

(function() {
    'use strict';

    // 版本信息
    const SCRIPT_VERSION = "1.0.2";

    // 日志函数
    function log(message) {
        console.log(`[Combined 脚本 v${SCRIPT_VERSION}] ${message}`);
    }

    // 随机延迟函数，返回Promise
    function randomDelay(min = 1000, max = 5000) { // 延迟1-5秒
        const delay = Math.floor(Math.random() * (max - min + 1)) + min;
        return new Promise(resolve => setTimeout(resolve, delay));
    }

    // 等待XPath选择器出现
    function waitForXPath(xpath, timeout = 30000) {
        return new Promise((resolve, reject) => {
            const interval = 500;
            let elapsed = 0;
            const timer = setInterval(() => {
                const result = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
                if (result.singleNodeValue) {
                    clearInterval(timer);
                    resolve(result.singleNodeValue);
                } else {
                    elapsed += interval;
                    if (elapsed >= timeout) {
                        clearInterval(timer);
                        reject(new Error(`等待XPath ${xpath} 超时`));
                    }
                }
            }, interval);
        });
    }

    // 等待CSS选择器出现
    function waitForSelector(selector, timeout = 30000) {
        return new Promise((resolve, reject) => {
            const interval = 500;
            let elapsed = 0;
            const timer = setInterval(() => {
                const element = document.querySelector(selector);
                if (element) {
                    clearInterval(timer);
                    resolve(element);
                } else {
                    elapsed += interval;
                    if (elapsed >= timeout) {
                        clearInterval(timer);
                        reject(new Error(`等待元素 ${selector} 超时`));
                    }
                }
            }, interval);
        });
    }

    // 关闭当前页面的安全处理
    function safeCloseWindow() {
        try {
            window.close();
            log("已尝试关闭当前页面。");
        } catch (e) {
            log("无法关闭当前页面。");
        }
    }

    // 主函数
    async function main() {
        try {
            const currentURL = window.location.href;
            log(`脚本开始执行，当前URL: ${currentURL}`);

            if (currentURL.includes('x.com/intent/')) {
                // 处理X.com Intent页面
                log("识别为 X.com Intent 页面。");

                // 随机延迟
                await randomDelay(1000, 5000); // 1-5秒

                // 定义XPath
                const smallWindowXPath = '//*[@id="layers"]/div[2]/div/div/div/div/div/div[2]/div[2]';
                const targetElementXPath = '//*[@id="layers"]/div[2]/div/div/div/div/div/div[2]/div[2]/div[2]/button[1]/div';

                // 监测小窗口的出现
                log("开始监测小窗口的出现...");
                const smallWindow = await waitForXPath(smallWindowXPath, 20000); // 等待最多20秒

                if (smallWindow) {
                    log("检测到小窗口，准备点击指定元素。");

                    // 查找并点击目标元素
                    const targetElement = document.evaluate(targetElementXPath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
                    if (targetElement) {
                        targetElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        await randomDelay(500, 1500); // 点击前的额外随机延迟
                        targetElement.click();
                        log("已点击指定元素。");

                        // 等待1-3秒后关闭页面
                        const closeDelay = Math.floor(Math.random() * (3000 - 1000 + 1)) + 1000; // 1-3秒
                        log(`等待 ${closeDelay} 毫秒后关闭页面。`);
                        await new Promise(resolve => setTimeout(resolve, closeDelay));

                        // 尝试关闭页面
                        safeCloseWindow();
                    } else {
                        log("未找到目标元素，无法点击。");
                    }
                } else {
                    log("未检测到小窗口，脚本终止。");
                }

            } else if (currentURL.includes('twitter.com/i/oauth2/authorize')) {
                // 处理Twitter OAuth2页面
                log("识别为 Twitter OAuth2 页面。");

                // 定义目标按钮的CSS选择器
                const targetButtonSelector = '#react-root > div > div > div.css-175oi2r.r-1f2l425.r-13qz1uu.r-417010 > main > div > div > div.css-175oi2r.r-1mlwlqe.r-16y2uox.r-1q142lx > div > div > div.css-175oi2r.r-11rk87y.r-1ur9v65 > button';

                // 等待目标按钮出现
                log("等待目标按钮加载...");
                try {
                    const targetButton = await waitForSelector(targetButtonSelector, 20000);
                    log("目标按钮已加载。");

                    // 随机延迟
                    const delay = Math.floor(Math.random() * 4000) + 1000; // 1-5秒
                    log(`等待随机延迟 ${delay} 毫秒后点击按钮。`);
                    await new Promise(resolve => setTimeout(resolve, delay));

                    // 点击目标按钮
                    if (targetButton) {
                        targetButton.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        await randomDelay(500, 1500); // 点击前的额外随机延迟
                        targetButton.click();
                        log("已点击目标按钮。");
                    } else {
                        log("未找到目标按钮，无法点击。");
                    }
                } catch (error) {
                    log(`未找到目标按钮或点击失败：${error.message}`);
                }

            } else if (currentURL.startsWith('https://x.com/compose/post')) { // 修改此处
                // 处理X.com Compose Post页面
                log("识别为 X.com Compose Post 页面。");

                // 随机延迟
                await randomDelay(1000, 5000); // 1-5秒

                // 定义XPath
                const containerXPath = '//*[@id="layers"]/div[2]/div/div/div/div/div/div[2]/div[2]/div/div/div/div[3]/div[2]/div[1]/div/div/div';
                const targetButtonXPath = '//*[@id="layers"]/div[2]/div/div/div/div/div/div[2]/div[2]/div/div/div/div[3]/div[2]/div[1]/div/div/div/div[2]/div[2]/div/div/div/button[2]';

                // 监测容器的出现
                log("开始监测Compose Post容器的出现...");
                try {
                    const container = await waitForXPath(containerXPath, 20000); // 等待最多20秒
                    if (container) {
                        log("检测到Compose Post容器，准备点击指定按钮。");

                        // 查找并点击目标按钮
                        const targetButton = document.evaluate(targetButtonXPath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
                        if (targetButton) {
                            targetButton.scrollIntoView({ behavior: 'smooth', block: 'center' });
                            await randomDelay(500, 1500); // 点击前的额外随机延迟
                            targetButton.click();
                            log("已点击指定按钮。");

                            // 等待1-3秒后关闭页面
                            const closeDelay = Math.floor(Math.random() * (3000 - 1000 + 1)) + 1000; // 1-3秒
                            log(`等待 ${closeDelay} 毫秒后关闭页面。`);
                            await new Promise(resolve => setTimeout(resolve, closeDelay));

                            // 尝试关闭页面
                            safeCloseWindow();
                        } else {
                            log("未找到目标按钮，无法点击。");
                        }
                    }
                } catch (error) {
                    log(`未找到Compose Post容器或点击失败：${error.message}`);
                }

            } else {
                log("当前页面不在监控范围内，脚本终止。");
            }

            log("脚本执行完毕。");

        } catch (error) {
            log(`发生错误: ${error.message}`);
        }
    }

    // 等待页面完全加载后执行主函数
    window.addEventListener('load', async () => {
        try {
            // 随机延迟后开始执行
            const initialDelay = Math.floor(Math.random() * 2000) + 1000; // 1-3秒
            log(`页面加载完成，等待 ${initialDelay} 毫秒后开始执行脚本。`);
            await new Promise(resolve => setTimeout(resolve, initialDelay));
            main();
        } catch (error) {
            log(`初始化错误: ${error.message}`);
        }
    });

})();
